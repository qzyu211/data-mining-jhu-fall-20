# Load data
polynomial_data <- read.csv('xid-94690945_2.txt', header = FALSE, sep = "")
polynomial_data
colnames(polynomial_data) <- c("X", "Y")
# Create initial variables
n <- nrow(polynomial_data)
X <- polynomial_data[,1]
Y <- polynomial_data[,2]
X
Y
cos(X)
length(cos(X))
cos(Y)
# Calculate the nth degree for X
nth_degree <- function(x, n) {
return(x^n)
}
list()
polynomial_list <- list()
nth <- 10
lapply(2:nth, function(y) nth_degree(x=X, n=y))
x2 <- nth_degree(x = X, n = 2)
x3 <- nth_degree(x = X, n = 3)
x4 <- nth_degree(x = X, n = 4)
x5 <- nth_degree(x = X, n = 5)
polynomial_list <- lapply(2:nth, function(y) nth_degree(x=X, n=y))
polynomial_list[[1]]
polynomial_list[[1]] == x2
polynomial_list[[2]] == x3
# Create the matrices for the nth degree polynomials
ones <- rep(1, n)
nth <- 10
polynomial_list <- lapply(1:nth, function(y) nth_degree(x=X, n=y))
polynomial_list
polynomial_list[[1]]
polynomial_list[[1]] == X
polynomial_list[[1:3]]
polynomial_list[1:3]
data_matrix = polynomial_list[1:3]
ones_vector=ones
cbind(ones_vector, data_matrix)
data_matrix
unlist(data_matrix)
do.call(cbind, data_matrix)
design_mat <- cbind(ones_vector, do.call(cbind, data_matrix))
design_mat
design_mat[,1]
design_mat[,2]
design_mat[,2] == polynomial_list[[1]]
design_mat[,3] == polynomial_list[[2]]
design_mat[,4] == polynomial_list[[3]]
design_mat[,4] == polynomial_list[[4]]
# data_matrix = polynomial_list[1:3]
create_design_matrix <- function(ones_vector=ones, data_matrix) {
design_mat <- cbind(ones_vector, do.call(cbind, data_matrix))
return(design_mat)
}
polynomial_list[1:2]
seq(1, 5)
seq(1, nth)
seq(1, nth)
sapply(seq(1, nth), function(x) 1:x)
sapply(seq(1, nth), function(x) c(1,x))
polynomial_list[1:1]
polynomial_degree_vec <- sapply(seq(1, nth), function(x) c(1,x))
polynomial_degree_vec
lapply(1:nth, function(x) polynomial_list[1:x])
lapply(1:3, function(x) polynomial_list[1:x])
polynomial_degree_groups <- lapply(1:nth, function(x) polynomial_list[1:x])
length(polynomial_degree_groups)
polynomial_degree_groups[[1]]
polynomial_degree_groups[[2]]
polynomial_design_matrix_list <- lapply(polynomial_degree_groups,
function(x) create_design_matrix(data_matrix = x))
polynomial_design_matrix_list[[1]]
polynomial_design_matrix_list[[2]]
polynomial_design_matrix_list[[3]]
polynomial_design_matrix_list[[4]]
polynomial_design_matrix_list[[5]]
X
Y
# Load data
polynomial_data <- read.csv('xid-94690945_2.txt', header = FALSE, sep = "")
colnames(polynomial_data) <- c("X", "Y")
# Create initial variables
n <- nrow(polynomial_data)
# Create initial variables
m <- nrow(polynomial_data)
X <- polynomial_data[,1]
Y <- polynomial_data[,2]
nth <- 10
# Create the matrices for the nth degree polynomials
m <- 10
halves <- rep(0.5, m)
# data_matrix = polynomial_list[1:3]
create_design_matrix <- function(halves_vector=halves, data_matrix) {
design_mat <- cbind(halves_vector, do.call(cbind, data_matrix))
return(design_mat)
}
nth <- 10
# Create the matrices for the nth degree polynomials
halves <- rep(0.5, nth)
# polynomial_list[1:2] # list these out in 1:1, 1:2, 1:3, etc.
polynomial_degree_vec <- sapply(seq(1, nth), function(x) c(1,x))
polynomial_degree_vec
polynomial_list
# Calculate the nth degree for X
nth_degree <- function(x, n) {
return(cos(n * x))
}
nth <- 10
polynomial_list <- lapply(1:nth, function(y) nth_degree(x=X, n=y))
polynomial_list[[]]
polynomial_list[[1]]
polynomial_list[[2]]
polynomial_list <- lapply(1:nth, function(y) nth_degree(x=X))
# Calculate the nth degree for X
nth_degree <- function(x, n) {
return(cos(n * x))
}
nth <- 10
polynomial_list <- lapply(1:nth, function(y) nth_degree(x=X, n=y))
polynomial_list[[1]]
polynomial_list[[2]]
# Create the matrices for the nth degree polynomials
halves <- rep(0.5, nth)
# data_matrix = polynomial_list[1:3]
create_design_matrix <- function(halves_vector=halves, data_matrix) {
design_mat <- cbind(halves_vector, do.call(cbind, data_matrix))
return(design_mat)
}
# polynomial_list[1:2] # list these out in 1:1, 1:2, 1:3, etc.
polynomial_degree_vec <- sapply(seq(1, nth), function(x) c(1,x))
polynomial_degree_vec
polynomial_degree_groups <- lapply(1:nth, function(x) polynomial_list[1:x])
polynomial_degree_groups[[1]]
polynomial_degree_groups[[2]]
polynomial_degree_groups[[3]]
# List of the different design matrices for various degree polynomials
polynomial_design_matrix_list <- lapply(polynomial_degree_groups,
function(x) create_design_matrix(data_matrix = x))
polynomial_design_matrix_list[[1]]
polynomial_design_matrix_list[[2]]
polynomial_design_matrix_list[[3]]
# Calculate the beta hat
beta_hat <- function(X, y) {
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
return(beta_hat)
}
beta_hat_list <- lapply(polynomial_design_matrix_list,
function(x) beta_hat(X = x, y = Y))
beta_hat_list[[1]]
beta_hat_list[[2]]
beta_hat_list[[3]]
beta_hat_list[[4]]
?mapply
adj_r_squared_list <- mapply(function(a, b) polynomial_design_matrix_list, beta_hat_list,
adj_r_squared(X = a, betahat = b, y = Y))
# Calculate the adjusted R-squared
adj_r_squared <- function(X, betahat, y) {
y_bar <- mean(y)
y_hat <- X %*% betahat
SS_tot <- sum((y - y_bar)^2)
SS_res <- sum((y - y_hat)^2)
n <- length(y)
p <- ncol(X) - 1
df_e <- n - p - 1
df_t <- n - 1
adj_r_square <- 1 - ((SS_res / df_e) / (SS_tot / df_t))
return(adj_r_square)
}
adj_r_squared_list <- mapply(function(a, b) adj_r_squared(X = a, betahat = b, y = Y),
polynomial_design_matrix_list, beta_hat_list)
adj_r_squared_list
plot(1:nth, adj_r_squared_list)
plot(1:nth, adj_r_squared_list, type='l')
adj_r_squared_list[5:nth]
plot(5:nth, adj_r_squared_list[5:nth], type='l')
plot(4:nth, adj_r_squared_list[4:nth], type='l')
plot(5:nth, adj_r_squared_list[5:nth], type='l')
plot(4:nth, adj_r_squared_list[4:nth], type='l', ylim = c(0.85, 1))
plot(4:nth, adj_r_squared_list[4:nth], type='l', ylim = c(0.8, 1))
plot(4:nth, adj_r_squared_list[4:nth], type='l', ylim = c(0.8, 0.9))
### Chosen model: n=5
beta_hat_list[[1]]
### Chosen model: n=5
beta_hat_list[[5]]
### Chosen model: n=5
y_hat <- polynomial_design_matrix_list[[5]] %*% beta_hat_list[[5]]
e
e <- Y - y_hat
plot(X,Y)
plot(X,y_hat, type = )
plot(X,Y, type = 'l')
lines(X,y_hat)
mean(e)
sd(e)
sd(e)^2
var(e)
n
m
n
nrow(X)
nrow(Y)
length(Y)
length(beta_hat_list[[5]])
p <- length(beta_hat_list[[5]])
SSE <- sum(e^2)
SSE / (n - p)
sigma_hat_2 <- SSE / (n - p)
### Problem 2 (c)
# plot density vs theta
thetas <- seq(0, 1, length.out = 1e4)
s0 <- function(theta) { return(2 * (1 - theta)) }
s1 <- function(theta) { return(2 * theta) }
plot(thetas, s0(thetas))
plot(thetas, s0(thetas), type = 'l')
plot(thetas, s0(thetas), type = 'l', col = 'red')
lines(thetas, s0(thetas), col = 'blue')
plot(thetas, s0(thetas), type = 'l', col = 'red')
lines(thetas, s1(thetas), col = 'blue')
plot(thetas, s0(thetas), type = 'l', col = 'red',
main = latex2exp::TeX('$P(\\theta | D) \\;vs.\\;\\theta$'))
plot(thetas, s0(thetas), type = 'l', col = 'red',
main = latex2exp::TeX('$P(\\theta | D) \\;vs.\\;\\theta$'),
xlab = latex2exp::TeX('$\\theta$'),
ylab = latex2exp::TeX('$P(\\theta | D)$'))
lines(thetas, s1(thetas), col = 'blue')
legend("centerright",
legend = c(latex2exp::TeX('$s=0$'),
latex2exp::TeX('$s=1$')))
legend("right",
legend = c(latex2exp::TeX('$s=0$'),
latex2exp::TeX('$s=1$')))
legend("right",
legend = c(latex2exp::TeX('$s=0$'),
latex2exp::TeX('$s=1$')),
col = c('red', 'blue'))
legend("right",
legend = c(latex2exp::TeX('$s=0$'),
latex2exp::TeX('$s=1$')),
col = c('red', 'blue'), lty = c(1,1))
# Load data
polynomial_data <- read.csv('xid-94690945_2.txt', header = FALSE, sep = "")
colnames(polynomial_data) <- c("X", "Y")
# Create initial variables
m <- nrow(polynomial_data)
X <- polynomial_data[,1]
Y <- polynomial_data[,2]
# Calculate the nth degree for X
nth_degree <- function(x, n) {
return(cos(n * x))
}
nth <- 10
polynomial_list <- lapply(1:nth, function(y) nth_degree(x=X, n=y))
# Create the matrices for the nth degree polynomials
halves <- rep(0.5, nth)
# data_matrix = polynomial_list[1:3]
create_design_matrix <- function(halves_vector=halves, data_matrix) {
design_mat <- cbind(halves_vector, do.call(cbind, data_matrix))
return(design_mat)
}
# polynomial_list[1:2] # list these out in 1:1, 1:2, 1:3, etc.
polynomial_degree_vec <- sapply(seq(1, nth), function(x) c(1,x))
polynomial_degree_groups <- lapply(1:nth, function(x) polynomial_list[1:x])
# List of the different design matrices for various degree polynomials
polynomial_design_matrix_list <- lapply(polynomial_degree_groups,
function(x) create_design_matrix(data_matrix = x))
# Calculate the beta hat
beta_hat <- function(X, y) {
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
return(beta_hat)
}
beta_hat_list <- lapply(polynomial_design_matrix_list,
function(x) beta_hat(X = x, y = Y))
# Calculate the adjusted R-squared
adj_r_squared <- function(X, betahat, y) {
y_bar <- mean(y)
y_hat <- X %*% betahat
SS_tot <- sum((y - y_bar)^2)
SS_res <- sum((y - y_hat)^2)
n <- length(y)
p <- ncol(X) - 1
df_e <- n - p - 1
df_t <- n - 1
adj_r_square <- 1 - ((SS_res / df_e) / (SS_tot / df_t))
return(adj_r_square)
}
adj_r_squared_list <- mapply(function(a, b) adj_r_squared(X = a, betahat = b, y = Y),
polynomial_design_matrix_list, beta_hat_list)
plot(1:nth, adj_r_squared_list, type='l')
plot(4:nth, adj_r_squared_list[4:nth], type='l', ylim = c(0.8, 0.9))
plot(5:nth, adj_r_squared_list[5:nth], type='l')
plot(1:nth, adj_r_squared_list, type='l')
plot(4:nth, adj_r_squared_list[4:nth], type='l', ylim = c(0.8, 0.9))
points(4:nth, adj_r_squared_list[4:nth])
par(mfrow = c(1,2))
plot(1:nth, adj_r_squared_list, type='l')
plot(4:nth, adj_r_squared_list[4:nth], type='l', ylim = c(0.8, 0.9))
par(mfrow = c(1,2))
plot(1:nth, adj_r_squared_list, type='l')
points(1:nth, adj_r_squared_list)
plot(4:nth, adj_r_squared_list[4:nth], type='l', ylim = c(0.8, 0.9))
points(4:nth, adj_r_squared_list[4:nth])
par(mfrow = c(1,2))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('R_{Adj}^2 \\; vs. \\; n'),
xlab = latex2exp::TeX('n'), ylab = latex2exp::TeX('R_{Adj}^2'))
par(mfrow = c(1,2))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
points(1:nth, adj_r_squared_list)
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n (n \\in \{1,\\cdots,10\})$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n (n \\in \{1,\\cdots,10\})$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
dev.off()
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n (n \\in \{1,\\cdots,10\})$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n (n \\in \{1\\,\\cdots\\,10\})$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n (n \\in $'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n \\; (for \\;n \\in $'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n \\; (for \\;n \\in \\{$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n \\; (for \\;n \\in \\{1\\}$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n \\; (for \\;n \\in \\{1,\\}$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n \\; (for \\;n \\in \\{1,\\cdots\\}$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n \\; (for \\;n \\in \\{1,\\cdots,10\\}$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n \\; (for \\;n \\in \\{1,\\cdots,10 \\}$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n \\; (for \\;n \\in \\{1,\\cdots,10 \\}\\}$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n \\; (for \\;n \\in \\left{1,\\cdots,10 \\right}$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n \\; (for \\;n \\in \\left{1,\\cdots,10 \\right})$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n \\; \\left(for \\;n \\in \\left{1,\\cdots,10 \\right}\\right)$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
par(mfrow = c(1,2))
plot(1:nth, adj_r_squared_list, type='l',
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n \\; \\left(for \\;n \\in \\left{1,\\cdots,10 \\right}\\right)$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
points(1:nth, adj_r_squared_list)
plot(4:nth, adj_r_squared_list[4:nth], type='l', ylim = c(0.8, 0.9),
main = latex2exp::TeX('$R_{Adj}^2 \\; vs. \\; n \\; \\left(for \\;n \\in \\left{4,\\cdots,10 \\right}\\right)$'),
xlab = latex2exp::TeX('$n$'), ylab = latex2exp::TeX('$R_{Adj}^2$'))
points(4:nth, adj_r_squared_list[4:nth])
### Chosen model: n=5
y_hat <- polynomial_design_matrix_list[[5]] %*% beta_hat_list[[5]]
plot(X,Y, type = 'l'); lines(X,y_hat)
e <- Y - y_hat
dev.off()
### Chosen model: n=5
y_hat <- polynomial_design_matrix_list[[5]] %*% beta_hat_list[[5]]
plot(X,Y, type = 'l'); lines(X,y_hat)
e <- Y - y_hat
mean(e) # correct
p <- length(beta_hat_list[[5]])
SSE <- sum(e^2)
sigma_hat_2 <- SSE / (n - p)
sorted_residuals <- sort(e_4)
e_quantile <- qnorm((1:n)/n, mean = mean(e_4), sd = sd(e_4))
plot(e_quantile, sorted_residuals, main = 'Q-Q Plot',
xlab = latex2exp::TeX('$Normal(\\bar{e}, \\sigma_{e}^2)$'),
ylab = latex2exp::TeX('Sorted Residuals'))
df <- data.frame(x = e_quantile, y = sorted_residuals)
fit <- lm(formula = y~x, data = df[1:(n-1),])
abline(fit)
sorted_residuals <- sort(e)
sorted_residuals <- sort(e)
e_quantile <- qnorm((1:m)/m, mean = mean(e), sd = sqrt(sigma_hat_2))
plot(e_quantile, sorted_residuals, main = 'Q-Q Plot',
xlab = latex2exp::TeX('$Normal(\\bar{e}, \\sigma_{e}^2)$'),
ylab = latex2exp::TeX('Sorted Residuals'))
df <- data.frame(x = e_quantile, y = sorted_residuals)
fit <- lm(formula = y~x, data = df[1:(n-1),])
abline(fit)
mean(e)
n
p
sigma_hat_2 <- SSE / (m - p)
sigma_hat_2
sigma_hat_2 <- SSE / (m - p)
sigma_hat_2
plot(X,Y, type = 'l'); lines(X,y_hat)
plot(X,Y, type = 'l',
main = 'The Midterm Data Fitted with the n=5 Model')
legend("topleft", legend = c('Midterm Data', 'Fitted Line'), col = c('black', 'blue'))
lines(X,y_hat)
plot(X,Y, type = 'l',
main = 'The Midterm Data Fitted with the n=5 Model')
legend("topleft", legend = c('Midterm Data', 'Fitted Line'), col = c('black', 'blue'))
lines(X,y_hat, col = 'blue')
plot(X,Y, type = 'l',
main = 'The Midterm Data Fitted with the n=5 Model')
legend("topleft", legend = c('Midterm Data', 'Fitted Line'),
col = c('black', 'blue'), lty = c(1,1))
lines(X,y_hat, col = 'blue')
plot(X,Y, type = 'l',
main = 'The Midterm Data Fitted with the n=5 Model')
legend("topleft", legend = c('Midterm Data', 'Fitted Line'),
col = c('black', 'red'), lty = c(1,1))
lines(X,y_hat, col = 'red')

reconstruction_error_n <- sapply(1:n_max, function(x) {
sum(reconstruction_diff[1:x,]^2)
})
# reconstruction_error <- rowSums((X - reconstruction_mat)^2)
plot(1:n_max, reconstruction_error_n)
# reconstruction_error <- rowSums((X - reconstruction_mat)^2)
plot(1:n_max, reconstruction_error_n, type = 'l')
reconstruction_error_n
# reconstruction_error <- rowSums((X - reconstruction_mat)^2)
plot(1:n_max, reconstruction_error_n, type = 'l',
xlab = 'n', ylab = 'E(n)', main = 'E(n) vs. n')
# Load optidigits data
train <- read.table('optdigits.tra', sep = ',')
table(train$V65)
# Load optidigits data
train <- read.table('optdigits.tra', sep = ',')
table(train$V65)
test <- read.table('optdigits.tes', sep = ',')
table(test$V65)
# V1-V64 are features, V65 is target vector
# attributes are ranged 0:16
# class are ranged 0:9
# no N/A
X <- train[,1:(ncol(train)-1)]
sample_means <- colMeans(X)
sample_sd <- sqrt(diag(cov(X)))
X_list <- as.list(X)
# Reference: https://stackoverflow.com/questions/39731068/how-to-let-a-matrix-minus-vector-by-row-rather-than-by-column
# Reference: https://stackoverflow.com/questions/3444889/how-to-use-the-sweep-function
X_centered <- sweep(X, 2, colMeans(X))
X_standardized <- sweep(X_centered, 2, sample_sd, FUN = "/")
### The first column is all zeros, cannot be standardized
X_standardized$V1 <- 0
X_standardized$V40 <- 0
sum(is.na(X_standardized))
X <- X_standardized
S <- cov(X)
eigens <- eigen(S)
W <- eigens$vectors # W is the PC matrix that is 64x64
# X is the normalized data matrix 3,823x64
reconstruction_1 <- W %*% t(X[1,]) + sample_means # reconstruction for first observation 64x1
reconstruction_mat <- t(W %*% t(X) + sample_means) # t(64x3,823)=orig dim
reconstruction_diff <- X - reconstruction_mat
n_max <- nrow(reconstruction_diff)
reconstruction_error_n <- sapply(1:n_max, function(x) {
sum(reconstruction_diff[1:x,]^2)
})
plot(1:n_max, reconstruction_error_n, type = 'l',
xlab = 'n', ylab = 'E(n)', main = 'E(n) vs. n')
z_mat
Z <- t(W) %*% X
# Load optidigits data
train <- read.table('optdigits.tra', sep = ',')
table(train$V65)
# V1-V64 are features, V65 is target vector
# attributes are ranged 0:16
# class are ranged 0:9
# no N/A
X <- train[,1:(ncol(train)-1)]
sample_means <- colMeans(X)
sample_sd <- sqrt(diag(cov(X)))
# Load optidigits data
train <- read.table('optdigits.tra', sep = ',')
table(train$V65)
# V1-V64 are features, V65 is target vector
# attributes are ranged 0:16
# class are ranged 0:9
# no N/A
X <- train[,1:(ncol(train)-1)]
sample_means <- colMeans(X)
sample_sd <- sqrt(diag(cov(X)))
X_list <- as.list(X)
# Reference: https://stackoverflow.com/questions/39731068/how-to-let-a-matrix-minus-vector-by-row-rather-than-by-column
# Reference: https://stackoverflow.com/questions/3444889/how-to-use-the-sweep-function
X_centered <- sweep(X, 2, colMeans(X))
X_standardized <- sweep(X_centered, 2, sample_sd, FUN = "/")
### The first column is all zeros, cannot be standardized
X_standardized$V1 <- 0
X_standardized$V40 <- 0
sum(is.na(X_standardized))
X <- X_standardized
# Load optidigits data
train <- read.table('optdigits.tra', sep = ',')
table(train$V65)
# V1-V64 are features, V65 is target vector
# attributes are ranged 0:16
# class are ranged 0:9
# no N/A
X <- train[,1:(ncol(train)-1)]
sample_means <- colMeans(X)
sample_sd <- sqrt(diag(cov(X)))
X_list <- as.list(X)
# Reference: https://stackoverflow.com/questions/39731068/how-to-let-a-matrix-minus-vector-by-row-rather-than-by-column
# Reference: https://stackoverflow.com/questions/3444889/how-to-use-the-sweep-function
X_centered <- sweep(X, 2, colMeans(X))
X_standardized <- sweep(X, 2, sample_sd, FUN = "/")
X_standardized
length(X_standardized)
dim(X_standardized)
# Load optidigits data
train <- read.table('optdigits.tra', sep = ',')
table(train$V65)
# V1-V64 are features, V65 is target vector
# attributes are ranged 0:16
# class are ranged 0:9
# no N/A
X <- train[,1:(ncol(train)-1)]
sample_means <- colMeans(X)
sample_sd <- sqrt(diag(cov(X)))
X_list <- as.list(X)
# Reference: https://stackoverflow.com/questions/39731068/how-to-let-a-matrix-minus-vector-by-row-rather-than-by-column
# Reference: https://stackoverflow.com/questions/3444889/how-to-use-the-sweep-function
X_centered <- sweep(X, 2, colMeans(X))
X_standardized <- sweep(X_centered, 2, sample_sd, FUN = "/")
X_standardized <- sweep(X_centered, 2, sample_sd, FUN = "/")
### The first column is all zeros, cannot be standardized
X_standardized$V1 <- 0
X_standardized$V40 <- 0
sum(is.na(X_standardized))
X <- X_standardized
### Normalization stats
colMeans(X)
### Normalization stats
colMeans(X); cov(X)
cov(X)
diag(cov(X))
length(colMeans(X))
dim(colMeans(X))
colMeans(X) == 0
colMeans(X)
S <- cov(X)
eigens <- eigen(S)
W <- eigens$vectors # W is the PC matrix that is 64x64
Z <- t(W) %*% X
W
dim(W)
length(W)
head(W)
Z <- X %*% W
dim(X)
dim(W)
Z <- as.matrix(X) %*% as.matrix(W)
dim(Z)
# Reconstruction
x_hat <- t(Z[1,]) %*% t(W) + sample_means
x_hat
X_hat <- Z %*% t(W) + sample_means
dim(X_hat)
# Reconstruction error
a = X_hat - X
head(a)
dim(a)
matrix(data=c(1,2,3,4),nrow=2)
matrix(data=c(1,2,3,4),nrow=2)^2
# Reconstruction error
total_reconstruction_error <- rowSums((X_hat - X)^2)
total_reconstruction_error
dim(total_reconstruction_error)
length(total_reconstruction_error)
# Reconstruction error
X_hat - X
c(1,2,3)
c(1,2,3)^2
dim(total_reconstruction_error)
length(total_reconstruction_error)
hist(total_reconstruction_error)
head(X_hat - X)
# Reconstruction error
a = X_hat - X
a[1,]
a[1,]^2
sum(a[1,]^2)
sum(a[2,]^2)
sum(a[3,]^2)
X_hat
dim(X_hat)
# Load optidigits data
train <- read.table('optdigits.tra', sep = ',')
table(train$V65)
# V1-V64 are features, V65 is target vector
# attributes are ranged 0:16
# class are ranged 0:9
# no N/A
X <- train[,1:(ncol(train)-1)]
sample_means <- colMeans(X)
sample_sd <- sqrt(diag(cov(X)))
X_list <- as.list(X)
### Normalization stats
colMeans(X) # roughly zero
diag(cov(X)) # all ones except cols 1, 40
S <- cov(X)
eigens <- eigen(S)
W <- eigens$vectors # W is the PC matrix that is 64x64
Z <- as.matrix(X) %*% as.matrix(W) # projection matrix
# Reconstruction
# x_hat <- t(Z[1,]) %*% t(W) + sample_means # single observation
X_hat <- Z %*% t(W) + sample_means # reconstruction matrix
# Reconstruction error
a = X_hat - X
total_reconstruction_error <- rowSums((X_hat - X)^2)
head(total_reconstruction_error)
# Load optidigits data
train <- read.table('optdigits.tra', sep = ',')
table(train$V65)
# V1-V64 are features, V65 is target vector
# attributes are ranged 0:16
# class are ranged 0:9
# no N/A
X <- train[,1:(ncol(train)-1)]
sample_means <- colMeans(X)
sample_sd <- sqrt(diag(cov(X)))
X_list <- as.list(X)
# Reference: https://stackoverflow.com/questions/39731068/how-to-let-a-matrix-minus-vector-by-row-rather-than-by-column
# Reference: https://stackoverflow.com/questions/3444889/how-to-use-the-sweep-function
X_centered <- sweep(X, 2, colMeans(X))
X_standardized <- sweep(X_centered, 2, sample_sd, FUN = "/")
### The first column is all zeros, cannot be standardized
X_standardized$V1 <- 0
X_standardized$V40 <- 0
sum(is.na(X_standardized))
X <- X_standardized
### Normalization stats
colMeans(X) # roughly zero
diag(cov(X)) # all ones except cols 1, 40
S <- cov(X)
eigens <- eigen(S)
dim(Z)
### analyze Z
Z_sub <- Z[,c(1,2)]
plot(Z_sub[,1], Z_sub[,2])
N <- nrow(train)
set.seed(1); rand_obs <- sort(sample(1:N, 1e2))
rand_obs
plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2])
set.seed(1); rand_obs <- sort(sample(1:N, 1e3))
plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2])
set.seed(1); rand_obs <- sort(sample(1:N, 5e2))
plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2])
set.seed(1); rand_obs <- sort(sample(1:N, 7e2))
plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2])
rand_obs
label_sample <- sort(sample(rand_obs, 1e2))
label_sample
train$V65
train$V65[label_sample]
label_sample <- sort(sample(rand_obs, 50))
train$V65[label_sample]
?text
sample_classes <- sort(sample(rand_obs, 50))
label_sample <- train$V65[sample_classes]
set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
label_sample <- train$V65[sample_classes]
label_sample
text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,1],
labels = label_sample)
Z_sub[sample_classes,1]
### analyze Z
Z_sub <- Z[,c(1,2)]
N <- nrow(train)
set.seed(1); rand_obs <- sort(sample(1:N, 7e2))
plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2])
set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
label_sample <- train$V65[sample_classes]
text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
labels = label_sample)
text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
labels = label_sample, col = 'red')
plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2], col = 'gray')
set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
label_sample <- train$V65[sample_classes]
text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
labels = label_sample, col = 'red')
# set.seed(1); rand_obs <- sort(sample(1:N, 7e2))
# plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2], col = 'gray')
# set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
# label_sample <- train$V65[sample_classes]
# text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
#      labels = label_sample, col = 'red')
plot(Z_sub[,1], Z_sub[,2], col = 'gray')
set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
label_sample <- train$V65[sample_classes]
text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
labels = label_sample, col = 'red')
# set.seed(1); rand_obs <- sort(sample(1:N, 7e2))
# plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2], col = 'gray')
# set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
# label_sample <- train$V65[sample_classes]
# text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
#      labels = label_sample, col = 'red')
plot(Z_sub[,1], Z_sub[,2], col = 'gray')
set.seed(1); sample_classes <- sort(sample(rand_obs, 5e2))
set.seed(1); sample_classes <- sort(sample(1:N, 5e2))
label_sample <- train$V65[sample_classes]
text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
labels = label_sample, col = 'red')
# set.seed(1); rand_obs <- sort(sample(1:N, 7e2))
# plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2], col = 'gray')
# set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
# label_sample <- train$V65[sample_classes]
# text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
#      labels = label_sample, col = 'red')
plot(Z_sub[,1], Z_sub[,2], col = 'gray')
set.seed(1); sample_classes <- sort(sample(1:N, 3e2))
label_sample <- train$V65[sample_classes]
text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
labels = label_sample, col = 'red')
# set.seed(1); rand_obs <- sort(sample(1:N, 7e2))
# plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2], col = 'gray')
# set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
# label_sample <- train$V65[sample_classes]
# text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
#      labels = label_sample, col = 'red')
plot(Z_sub[,1], Z_sub[,2], col = 'gray')
set.seed(1); sample_classes <- sort(sample(1:N, 2e2))
label_sample <- train$V65[sample_classes]
text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
labels = label_sample, col = 'red')
# set.seed(1); rand_obs <- sort(sample(1:N, 7e2))
# plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2], col = 'gray')
# set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
# label_sample <- train$V65[sample_classes]
# text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
#      labels = label_sample, col = 'red')
plot(Z_sub[,1], Z_sub[,2], col = 'gray',
xlab = 'PC1', ylab = 'PC2', main = 'Optidigts PCA')
set.seed(1); sample_classes <- sort(sample(1:N, 2e2))
label_sample <- train$V65[sample_classes]
text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
labels = label_sample, col = 'red')
# set.seed(1); rand_obs <- sort(sample(1:N, 7e2))
# plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2], col = 'gray')
# set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
# label_sample <- train$V65[sample_classes]
# text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
#      labels = label_sample, col = 'red')
plot(Z_sub[,1], Z_sub[,2], col = 'gray',
xlab = 'PC1', ylab = 'PC2', main = 'Optidigts PCA', pch=1)
# set.seed(1); rand_obs <- sort(sample(1:N, 7e2))
# plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2], col = 'gray')
# set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
# label_sample <- train$V65[sample_classes]
# text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
#      labels = label_sample, col = 'red')
plot(Z_sub[,1], Z_sub[,2], col = 'gray',
xlab = 'PC1', ylab = 'PC2', main = 'Optidigts PCA', pch=2)
# set.seed(1); rand_obs <- sort(sample(1:N, 7e2))
# plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2], col = 'gray')
# set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
# label_sample <- train$V65[sample_classes]
# text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
#      labels = label_sample, col = 'red')
plot(Z_sub[,1], Z_sub[,2], col = 'gray',
xlab = 'PC1', ylab = 'PC2', main = 'Optidigts PCA', pch=3)
# set.seed(1); rand_obs <- sort(sample(1:N, 7e2))
# plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2], col = 'gray')
# set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
# label_sample <- train$V65[sample_classes]
# text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
#      labels = label_sample, col = 'red')
plot(Z_sub[,1], Z_sub[,2], col = 'gray',
xlab = 'PC1', ylab = 'PC2', main = 'Optidigts PCA', pch=8)
# set.seed(1); rand_obs <- sort(sample(1:N, 7e2))
# plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2], col = 'gray')
# set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
# label_sample <- train$V65[sample_classes]
# text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
#      labels = label_sample, col = 'red')
plot(Z_sub[,1], Z_sub[,2], col = 'gray',
xlab = 'PC1', ylab = 'PC2', main = 'Optidigts PCA', pch=6)
# set.seed(1); rand_obs <- sort(sample(1:N, 7e2))
# plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2], col = 'gray')
# set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
# label_sample <- train$V65[sample_classes]
# text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
#      labels = label_sample, col = 'red')
plot(Z_sub[,1], Z_sub[,2], col = 'gray',
xlab = 'PC1', ylab = 'PC2', main = 'Optidigts PCA', pch=20)
?plot
# set.seed(1); rand_obs <- sort(sample(1:N, 7e2))
# plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2], col = 'gray')
# set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
# label_sample <- train$V65[sample_classes]
# text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
#      labels = label_sample, col = 'red')
plot(Z_sub[,1], Z_sub[,2], col = 'gray',
xlab = 'PC1', ylab = 'PC2', main = 'Optidigts PCA', pch=19)
set.seed(1); sample_classes <- sort(sample(1:N, 2e2))
label_sample <- train$V65[sample_classes]
# Reference: https://rpubs.com/RatherBit/188960
text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
labels = label_sample, col = 'red')
# Reconstruction
# x_hat <- t(Z[1,]) %*% t(W) + sample_means # single observation
X_hat <- Z %*% t(W) + sample_means # reconstruction matrix
# set.seed(1); rand_obs <- sort(sample(1:N, 7e2))
# plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2], col = 'gray')
# set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
# label_sample <- train$V65[sample_classes]
# text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
#      labels = label_sample, col = 'red')
plot(Z_sub[,1], Z_sub[,2], col = 'gray',
xlab = 'PC1', ylab = 'PC2', main = 'Optidigts PCA', pch=19, cex=0.1)
# set.seed(1); rand_obs <- sort(sample(1:N, 7e2))
# plot(Z_sub[rand_obs,1], Z_sub[rand_obs,2], col = 'gray')
# set.seed(1); sample_classes <- sort(sample(rand_obs, 50))
# label_sample <- train$V65[sample_classes]
# text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
#      labels = label_sample, col = 'red')
plot(Z_sub[,1], Z_sub[,2], col = 'gray',
xlab = 'PC1', ylab = 'PC2', main = 'Optidigts PCA', pch=19, cex=0.2)
set.seed(1); sample_classes <- sort(sample(1:N, 2e2))
label_sample <- train$V65[sample_classes]
# Reference: https://rpubs.com/RatherBit/188960
text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
labels = label_sample, col = 'red')
# Reconstruction
# x_hat <- t(Z[1,]) %*% t(W) + sample_means # single observation
X_hat <- Z %*% t(W) + sample_means # reconstruction matrix
# Reference: https://stackoverflow.com/questions/2579995/control-the-size-of-points-in-an-r-scatterplot
plot(Z_sub[,1], Z_sub[,2], col = 'gray',
xlab = 'PC1', ylab = 'PC2', main = 'Optidigts PCA', pch=19, cex=0.2)
set.seed(1); sample_classes <- sort(sample(1:N, 2e2))
label_sample <- train$V65[sample_classes]
# Reference: https://rpubs.com/RatherBit/188960
text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
labels = label_sample, col = 'red')
# Reference: https://stackoverflow.com/questions/2579995/control-the-size-of-points-in-an-r-scatterplot
plot(Z_sub[,1], Z_sub[,2], col = scales::alpha('gray'm 0.4),
xlab = 'PC1', ylab = 'PC2', main = 'Optidigts PCA', pch=19, cex=0.2)
# Reference: https://stackoverflow.com/questions/2579995/control-the-size-of-points-in-an-r-scatterplot
plot(Z_sub[,1], Z_sub[,2], col = scales::alpha('gray', 0.4),
xlab = 'PC1', ylab = 'PC2', main = 'Optidigts PCA', pch=19, cex=0.2)
set.seed(1); sample_classes <- sort(sample(1:N, 2e2))
label_sample <- train$V65[sample_classes]
# Reference: https://rpubs.com/RatherBit/188960
text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
labels = label_sample, col = 'red')
# Reference: https://stackoverflow.com/questions/2579995/control-the-size-of-points-in-an-r-scatterplot
plot(Z_sub[,1], Z_sub[,2], col = scales::alpha('gray', 0.4),
xlab = 'PC1', ylab = 'PC2', main = 'Optidigts PCA', pch=19, cex=0.2)
set.seed(1); sample_classes <- sort(sample(1:N, 2e2))
label_sample <- train$V65[sample_classes]
# Reference: https://rpubs.com/RatherBit/188960
text(x = Z_sub[sample_classes,1], y = Z_sub[sample_classes,2],
labels = label_sample, col = scales::alpha('red', 0.4))
W %*% t(W)
dim(W)
# Create an X-hat for 1-64 PC's
sapply(1:64, function(x) {
print(x)
})
dim(W)
x=2
Z <- as.matrix(X) %*% as.matrix(W[,1:x])
Z %*% t(W) + sample_means
dim(Z)
Z %*% t(W[,1:x]) + sample_means
X_hat <- Z %*% t(W[,1:x]) + sample_means
dim(X_hat)
dim(Z)
dim(X_hat)
dim(W)
# Create an X-hat for 1-64 PC's
X_hat_levels <- sapply(1:64, function(x) {
Z <- as.matrix(X) %*% as.matrix(W[,1:x])
X_hat <- Z %*% t(W[,1:x]) + sample_means
X_hat
})
length(X_hat_levels)
dim(X_hat_levels)
# Create an X-hat for 1-64 PC's
lapply(1:10, function(x) print(x))
# Create an X-hat for 1-64 PC's
X_hat_levels <- lapply(1:64, function(x) {
Z <- as.matrix(X) %*% as.matrix(W[,1:x])
X_hat <- Z %*% t(W[,1:x]) + sample_means
X_hat
})
length(X_hat_levels)
X_hat_levels[[1]]
lapply(X_hat_levels, function(x) dim(x))
a
total_reconstruction_error
X - X_hat_levels[[1]]
dim(X - X_hat_levels[[1]])
dim((X - X_hat_levels[[1]])^2)
rowSums((X - X_hat_levels[[1]])^2)
dim(rowSums((X - X_hat_levels[[1]])^2))
length(rowSums((X - X_hat_levels[[1]])^2))
length(colSums((X - X_hat_levels[[1]])^2))
?colSums
matrix(c(1,2,3,4),nrow=2)
colSums()
colSums(matrix(c(1,2,3,4),nrow=2))
rowSums(matrix(c(1,2,3,4),nrow=2))
reconstruction_error_list <- lapply(X_hat_levels, function(x) {
sum(rowSums((x - X)^2))
})
do.call(rbind, reconstruction_error_list)
reconstruction_error_df <- do.call(rbind, reconstruction_error_list)
plot(1:64, reconstruction_error_df)
plot(1:64, reconstruction_error_df, type = 'l')
points(1:64, reconstruction_error_df)
points(1:64, reconstruction_error_df, pch = 19)
points(1:64, reconstruction_error_df, pch = 2)
points(1:64, reconstruction_error_df, pch = 1)
plot(1:64, reconstruction_error_df, type = 'l')
points(1:64, reconstruction_error_df, pch = 1)
plot(1:64, reconstruction_error_df, type = 'l',
main = 'E(n) vs. n', xlab = '# of PC\'s', ylab = 'Reconstruction Error')
points(1:64, reconstruction_error_df, pch = 1)
dim(X)

polynomial_data <- read.csv('polynomial_data.txt')
polynomial_data
head(polynomial_data)
polynomial_data <- read.csv('polynomial_data.txt', header = FALSE)
polynomial_data <- read.csv('polynomial_data.txt', header = FALSE)
head(polynomial_data)
colnames(polynomial_data) <- c("X", "Y")
dim(polynomial_data)
rownames(polynomial_data)
colnames(polynomial_data)
?read.csv
polynomial_data <- read.csv('polynomial_data.txt', header = FALSE, sep = " ")
colnames(polynomial_data) <- c("X", "Y")
head(polynomial_data)
polynomial_data <- read.csv('polynomial_data.txt', header = FALSE, sep = "")
colnames(polynomial_data) <- c("X", "Y")
head(polynomial_data)
polynomial_data
head(polynomial_data)
X <- polynomial_data[,1]
Y <- polynomial_data[,2]
nth_degree <- function(x, n) {
x <- x^n
return(x^n)
}
x2 <- nth_degree(x = X, n = 2)
x2
x3 <- nth_degree(x = X, n = 3)
x4 <- nth_degree(x = X, n = 4)
x5 <- nth_degree(x = X, n = 5)
# Load data
polynomial_data <- read.csv('polynomial_data.txt', header = FALSE, sep = "")
colnames(polynomial_data) <- c("X", "Y")
X <- polynomial_data[,1]
Y <- polynomial_data[,2]
nth_degree <- function(x, n) {
x <- x^n
return(x^n)
}
x2 <- nth_degree(x = X, n = 2)
x3 <- nth_degree(x = X, n = 3)
x4 <- nth_degree(x = X, n = 4)
x5 <- nth_degree(x = X, n = 5)
length(polynomial_data)
rows(polynomial_data)
numrows
dim(polynomial_data)
dim(polynomial_data)[1]
nrows
nrow(polynomial_data)
n <- nrow(polynomial_data)
ones <- rep(1, n)
ones
X3 <- cbind(ones, X, x2, x3)
head(X3)
X4 <- cbind(ones, X, x2, x3, x4)
X5 <- cbind(ones, X, x2, x3. x4, x5)
ones <- rep(1, n)
X3 <- cbind(ones, X, x2, x3)
X4 <- cbind(ones, X, x2, x3, x4)
X5 <- cbind(ones, X, x2, x3, x4, x5)
beta_hat_fun <- function(X, y) {
beta_hat <- solve(t(X) %*% X) %*% t(X)
return(beta_hat)
}
beta_hat_fun(X = X3, y = Y)
beta_hat_3 <- beta_hat_fun(X = X3, y = Y)
beta_hat_4 <- beta_hat_fun(X = X4, y = Y)
beta_hat_5 <- beta_hat_fun(X = X5, y = Y)
beta_hat_3 <- beta_hat_fun(X = X3, y = Y)
beta_hat_4 <- beta_hat_fun(X = X4, y = Y)
beta_hat_5 <- beta_hat_fun(X = X5, y = Y)
X4
head(beta_hat_3 <- beta_hat_fun(X = X3, y = Y))
head(X4)
beta_hat_3 <- beta_hat_fun(X = X3, y = Y)
beta_hat_4 <- beta_hat_fun(X = X4, y = Y)
head(X)
head(X3)
X
x2
(X^2) == x2
X^2
x2
nth_degree(x = X,n = 1)
nth_degree(x = X,n = 1) == X
X^2
nth_degree(x = X,n = 2) == X^2
X^2
# Load data
polynomial_data <- read.csv('polynomial_data.txt', header = FALSE, sep = "")
colnames(polynomial_data) <- c("X", "Y")
n <- nrow(polynomial_data)
X <- polynomial_data[,1]
Y <- polynomial_data[,2]
nth_degree <- function(x, n) {
return(x^n)
}
x2 <- nth_degree(x = X, n = 2)
x3 <- nth_degree(x = X, n = 3)
x4 <- nth_degree(x = X, n = 4)
x5 <- nth_degree(x = X, n = 5)
x2 == X^2
x3 == X^3
ones <- rep(1, n)
X3 <- cbind(ones, X, x2, x3)
X4 <- cbind(ones, X, x2, x3, x4)
X5 <- cbind(ones, X, x2, x3, x4, x5)
beta_hat_fun <- function(X, y) {
beta_hat <- solve(t(X) %*% X) %*% t(X)
return(beta_hat)
}
beta_hat_3 <- beta_hat_fun(X = X3, y = Y)
beta_hat_4 <- beta_hat_fun(X = X4, y = Y)
beta_hat_5 <- beta_hat_fun(X = X5, y = Y)
beta_hat_3 %*% Y
y3 <- X3 %*% beta_hat_3
y4 <- X4 %*% beta_hat_4
y5 <- X5 %*% beta_hat_5
# Calculate the beta hat
beta_hat <- function(X, y) {
beta_hat <- solve(t(X) %*% X) %*% t(X)
return(beta_hat)
}
beta_hat_3 <- beta_hat(X = X3, y = Y)
beta_hat_4 <- beta_hat(X = X4, y = Y)
beta_hat_5 <- beta_hat(X = X5, y = Y)
y3 <- X3 %*% beta_hat_3
y4 <- X4 %*% beta_hat_4
y5 <- X5 %*% beta_hat_5
ncol(X2)
ncol(X3)
head(X3)
adj_r_squared <- function(X, betahat, y) {
y_bar <- mean(y)
y_hat <- X %*% betahat
SS_tot <- sum((y - y_bar)^2)
SS_res <- sum((y - y_hat)^2)
n <- nrow(y)
p <- ncol(X) - 1
df_e <- n - p - 1
df_t <- n - 1
adj_r_square <- 1 - ((SS_res / df_e) / (SS_tot / df_t))
return(adj_r_square)
}
adj_r_squared_3 <- adj_r_squared(X = X3, betahat = beta_hat_3, y = Y)
adj_r_squared_4 <- adj_r_squared(X = X4, betahat = beta_hat_4, y = Y)
adj_r_squared_5 <- adj_r_squared(X = X5, betahat = beta_hat_5, y = Y)
adj_r_squared_3
adj_r_squared_4
Y
X3
X = X3
betahat = beta_hat_3
y = Y
y_bar <- mean(y)
y_hat <- X %*% betahat
SS_tot <- sum((y - y_bar)^2)
SS_res <- sum((y - y_hat)^2)
n <- nrow(y)
p <- ncol(X) - 1
df_e <- n - p - 1
df_t <- n - 1
adj_r_square <- 1 - ((SS_res / df_e) / (SS_tot / df_t))
adj_r_square
y_bar <- mean(y)
y_hat <- X %*% betahat
y_bar
y_hat
SS_tot <- sum((y - y_bar)^2)
SS_tot <- sum((y - y_bar)^2)
SS_tot
SS_res
y - y_hat
a = y-y_bar
b = y-y_hat
dim(a)
length(a)
dim(b)
y_hat
y - y_hat
dim(y - y_hat)
y_mat <- matrix(y, y_hat, ncol = 2)
y_bar <- mean(y)
y_hat <- X %*% betahat
y_mat <- matrix(y, y_hat, ncol = 2)
y_bar <- mean(y)
y_hat <- X %*% betahat
y_df <- cbind(y, y_hat)
head(y_df)
dim(y_df)
y
dim(y)
y_hat
dim(y_hat)
y_bar <- mean(y)
y_hat <- betahat %*% X
SS_tot <- sum((y - y_bar)^2)
SS_res <- sum((y - y_hat)^2)
dim(y_hat)
betahat
dim(beta_hat_3)
X = X3, betahat = beta_hat_3, y = Y
X = X3
betahat = beta_hat_3
y = Y
# Calculate the beta hat
beta_hat <- function(X, y) {
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
return(beta_hat)
}
beta_hat_3 <- beta_hat(X = X3, y = Y)
beta_hat_4 <- beta_hat(X = X4, y = Y)
beta_hat_5 <- beta_hat(X = X5, y = Y)
# Calculate the nth degree y-hat
y3 <- X3 %*% beta_hat_3
y4 <- X4 %*% beta_hat_4
y5 <- X5 %*% beta_hat_5
y_bar <- mean(y)
y_hat <- X %*% betahat
y_hat
length(y_hat)
dim(y_hat)
adj_r_squared <- function(X, betahat, y) {
y_bar <- mean(y)
y_hat <- X %*% betahat
# y_df <- cbind(y, y_hat)
SS_tot <- sum((y - y_bar)^2)
SS_res <- sum((y - y_hat)^2)
n <- nrow(y)
p <- ncol(X) - 1
df_e <- n - p - 1
df_t <- n - 1
adj_r_square <- 1 - ((SS_res / df_e) / (SS_tot / df_t))
return(adj_r_square)
}
adj_r_squared_3 <- adj_r_squared(X = X3, betahat = beta_hat_3, y = Y)
adj_r_squared_4 <- adj_r_squared(X = X4, betahat = beta_hat_4, y = Y)
adj_r_squared_5 <- adj_r_squared(X = X5, betahat = beta_hat_5, y = Y)
adj_r_squared_3
X = X3, betahat = beta_hat_3, y = Y
X = X3
betahat = beta_hat_3
y = Y
y_bar <- mean(y)
y_hat <- X %*% betahat
y_hat
SS_tot <- sum((y - y_bar)^2)
SS_res <- sum((y - y_hat)^2)
SS_tot
SS_res
n <- nrow(y)
p <- ncol(X) - 1
df_e <- n - p - 1
df_t <- n - 1
adj_r_square <- 1 - ((SS_res / df_e) / (SS_tot / df_t))
adj_r_square
SS_tot
SS_res
n <- nrow(y)
p <- ncol(X) - 1
n
n <- length(y)
n
p
p <- ncol(X) - 1
df_e <- n - p - 1
df_t <- n - 1
adj_r_square <- 1 - ((SS_res / df_e) / (SS_tot / df_t))
adj_r_square
adj_r_squared <- function(X, betahat, y) {
y_bar <- mean(y)
y_hat <- X %*% betahat
# y_df <- cbind(y, y_hat)
SS_tot <- sum((y - y_bar)^2)
SS_res <- sum((y - y_hat)^2)
n <- length(y)
p <- ncol(X) - 1
df_e <- n - p - 1
df_t <- n - 1
adj_r_square <- 1 - ((SS_res / df_e) / (SS_tot / df_t))
return(adj_r_square)
}
adj_r_squared_3 <- adj_r_squared(X = X3, betahat = beta_hat_3, y = Y)
adj_r_squared_4 <- adj_r_squared(X = X4, betahat = beta_hat_4, y = Y)
adj_r_squared_5 <- adj_r_squared(X = X5, betahat = beta_hat_5, y = Y)
adj_r_squared_3
adj_r_squared_4
adj_r_squared_5
X = X3
betahat = beta_hat_3
y = Y
y_bar <- mean(y)
y_hat <- X %*% betahat
length(y_hat)
dim(y_hat)
SS_tot <- sum((y - y_bar)^2)
SS_res <- sum((y - y_hat)^2)
n <- length(y)
ncol(X)
ncol(X3)
ncol(X4)
ncol(X5)
### Chosen model: n=4
y_hat_4 <- X4 %*% beta_hat_4
e_4 <- Y- y_hat_4
e_4
mean(e_4)
var(e_4)
sd(e_4)
n
sorted_residuals <- sort(e_4)
e_quantile <- qnorm((1:n)/n, mean = mean(e_4), sd = sd(e_4))
plot(e_quantile, sorted_residuals, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\\bar{y}, s)'), ylab = 'residuals')
plot(e_quantile, sorted_residuals, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\\bar{e}, \\sigma_e^2)'),
ylab = 'residuals')
df <- data.frame(x = e_quantile, y = sorted_residuals)
fit <- lm(formula = y~x, data = df[1:(n-1),])
abline(fit)
plot(e_quantile, sorted_residuals, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\\bar{e}, \\sigma_e^2)'),
ylab = latex2exp::TeX('Sorted Residuals'))
sorted_residuals
plot(e_quantile, sorted_residuals, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\\bar{e}, \\sigma_{e}^2)'),
ylab = latex2exp::TeX('Sorted Residuals'))
plot(e_quantile, sorted_residuals, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\\bar{e}, \sigma_{e}^2)'),
ylab = latex2exp::TeX('Sorted Residuals'))
plot(e_quantile, sorted_residuals, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\\bar{e}, \\sigma_{e}^2)'),
ylab = latex2exp::TeX('Sorted Residuals'))
plot(e_quantile, sorted_residuals, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\\bar{e}, \\sigma)'),
ylab = latex2exp::TeX('Sorted Residuals'))
plot(e_quantile, sorted_residuals, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\\bar{e}, \sigma)'),
ylab = latex2exp::TeX('Sorted Residuals'))
plot(e_quantile, sorted_residuals, main = 'Q-Q Plot',
xlab = latex2exp::TeX('$Normal(\\bar{e}, \\sigma_{e}^2)$'),
ylab = latex2exp::TeX('Sorted Residuals'))
df <- data.frame(x = e_quantile, y = sorted_residuals)
fit <- lm(formula = y~x, data = df[1:(n-1),])
abline(fit)
mean(e_4)
var(e_4)
